import sys

from PySide2 import QtPrintSupport, QtGui
from PySide2.QtCore import *
from PySide2.QtGui import *
from PySide2.QtMultimedia import QCameraInfo, QCamera, QCameraImageCapture
from PySide2.QtMultimediaWidgets import QCameraViewfinder
from PySide2.QtWebEngineWidgets import QWebEngineView
from PySide2.QtWidgets import *

from .PYSCREENS.ui_main import Ui_main
from .PYSCREENS.LoadingDialog import Ui_MainWindow as LoadingDialog


class LoadingWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self.ui = LoadingDialog()
        self.ui.setupUi(self)
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.movie = QMovie(r"assets\gif\loading2.gif")
        self.ui.label.setMovie(self.movie)
        self.ui.label.setScaledContents(True)
        self.setStyleSheet("background-color:rgb(41, 45, 60,0.5);border:50px;")
        self.movie.start()
        self.setWindowModality(Qt.ApplicationModal)


class MainWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self.ui = Ui_main()
        self.ui.setupUi(self)
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.ui.close.clicked.connect(self.close)
        self.ui.logo.setPixmap(QPixmap(r"assets/img/logo.png"))
        self.ui.logo_2.setPixmap(QPixmap(r"assets/img/logo.png"))
        self.ui.stackedWidget.setCurrentIndex(2)
        self.ui.login_2.clicked.connect(self.login)
        self.ui.listofvic.horizontalHeader().setVisible(True)
        self.ui.listofvic.clicked.connect(self.row_clicked)
        self.ui.disconnect.setVisible(False)
        self.ui.disconnect.clicked.connect(self.disconnect)

    def row_clicked(self, index):

        cellContent = index.data()
        print(cellContent)  # test
        sf = "You clicked on {}".format(cellContent)
        self.ui.stackedWidget.setCurrentIndex(1)
        self.ui.disconnect.setVisible(True)

        print(sf)

    def disconnect(self):
        self.ui.stackedWidget.setCurrentIndex(0)
        self.ui.disconnect.setVisible(False)

    def login(self):
        username = self.ui.username.text().strip()
        password = self.ui.password.text().strip()
        if username == "admin" and password == "admin":
            self.ui.stackedWidget.setCurrentIndex(0)
            self.ui.disconnect.setVisible(False)
        else:
            self.ui.Errormsg_2.setText("Invalid username or password")

    def mousePressEvent(self, event):
        self.oPos = event.globalPos()

    def mouseMoveEvent(self, QMouseEvent):
        delta = QPoint(QMouseEvent.globalPos() - self.oPos)
        self.move(self.x() + delta.x(), self.y() + delta.y())
        self.oPos = QMouseEvent.globalPos()
